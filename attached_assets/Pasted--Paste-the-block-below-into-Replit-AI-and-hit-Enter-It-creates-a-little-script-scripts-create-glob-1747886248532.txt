

Paste the block below into Replit AI and hit Enter.
It creates a little script scripts/create-global-admin.ts, then runs it once to insert the user and wire the role.

You are an expert TypeScript dev.
Add a script that seeds a Global Admin user.

────────────────────────────────────────
1️⃣  scripts/create-global-admin.ts
────────────────────────────────────────
```ts
import "dotenv/config";
import { db } from "../server/db";
import { employees, roles, employeeRoles } from "@shared/schema";
import { eq } from "drizzle-orm";

// 1. Ensure the admin role exists
async function ensureAdminRole() {
  const [adminRole] = await db
    .insert(roles)
    .values({ name: "admin", description: "Global administrator" })
    .onConflictDoNothing()
    .returning();
  if (adminRole) return adminRole.id;

  const [{ id }] = await db
    .select({ id: roles.id })
    .from(roles)
    .where(eq(roles.name, "admin"));
  return id;
}

// 2. Create or fetch the admin employee record
async function ensureAdminEmployee() {
  const email = "admin.global@example.com";
  const existing = await db
    .select()
    .from(employees)
    .where(eq(employees.email, email));

  if (existing.length) return existing[0].id;

  const [emp] = await db
    .insert(employees)
    .values({
      firstName: "Global",
      lastName: "Admin",
      email,
      phone: "000-000-0000",
      position: "System Administrator",
      departmentId: 1,                 // update if you have a real dept ID
      hireDate: new Date(),
    })
    .returning();
  return emp.id;
}

// 3. Link the employee to the admin role
(async () => {
  const roleId = await ensureAdminRole();
  const employeeId = await ensureAdminEmployee();

  await db
    .insert(employeeRoles)
    .values({ employeeId, roleId })
    .onConflictDoNothing();

  console.log(`✔ Global Admin ready (employee_id=${employeeId}, role_id=${roleId})`);
  process.exit(0);
})();

────────────────────────────────────────
2️⃣  Add an npm script
────────────────────────────────────────
In package.json:

"scripts": {
  // …
  "create:admin": "ts-node scripts/create-global-admin.ts"
}

────────────────────────────────────────
3️⃣  Run it once in the shell
────────────────────────────────────────

npm run db:push          # if you haven’t yet
npm run create:admin     # seeds the user & role

That’s it—the employee row is created, the role is linked, and your admin endpoints will authenticate anyone whose session maps to that employee record (e.g., a Replit or Direct-Auth user with email = admin.global@example.com). If you’d rather key off username instead of email, just swap the field in the script.

⸻

How to confirm it worked
	1.	SQL check

select e.id, e.email, r.name
from employees e
join employee_roles er on er.employee_id = e.id
join roles r on r.id = er.role_id
where e.email = 'admin.global@example.com';

Should return one row with name = admin.
	2.	API check
Sign in as admin.global (or however your auth flow identifies the user), then hit:
GET /api/change_requests → should return the pending list instead of 403.

⸻

🏁 Next steps
	1.	Run the migration (generate + db:push) if you haven’t.
	2.	Seed the Global Admin with the script above.
	3.	Log in and exercise the flow—submit a change on /me, approve it on /admin/requests, watch the audit_log fill up.

Ping me with any errors or if you want to tweak the admin’s username/email—happy to adjust!